import {GAME_STATE} from '../consts'

export const GRAVITY_UP = 1200   // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–≤–µ—Ä—Ö
export const GRAVITY_DOWN = 1500 // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
export const MAX_FALL_SPEED = 800 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∏–∑–∏–∫–∏
export const MOVE_SPEED = 200    // –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É
export const JUMP_FORCE = -550   // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä—ã–∂–∫–∞

export function isCollided(a, b) {
  return a.x < b.x + b.width &&
    a.x + a.width > b.x &&
    a.y < b.y + b.height &&
    a.y + a.height > b.y;
}

export function drawPixels(ctx, pixels, { scale, colors, flipX, shiftY = 0 }) {
  for (let j = 0; j < pixels.length; j++) {
    for (let i = 0; i < pixels[j].length; i++) {
      const p = pixels[j][i];
      ctx.fillStyle = colors[p];
      const x = flipX ? (20 - 1 - i) * scale : i * scale
      const y = j * scale + (scale >= 2.2 ? shiftY / 2 : shiftY)
      ctx.fillRect(x, y, scale, scale);
    }
  }
}

export function renderWithCamera(cx, camera, df) {
  cx.save()
  cx.translate(-camera.x, -camera.y)
  df(cx)
  cx.restore()
}

export function renderBackground(cx, cs) {
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const gradient = cx.createLinearGradient(0, 0, 0, cs.height)
  gradient.addColorStop(0, '#87CEEB')
  gradient.addColorStop(1, '#E0F7FA')

  cx.fillStyle = gradient
  cx.fillRect(0, 0, cs.width, cs.height)
}
function renderLevelName(levelNumber) {
  if (levelNumber === GAME_STATE.LEVEL1) {
    return 'HOME'
  } else if (levelNumber === GAME_STATE.LEVEL2) {
    return 'CITY'
  } else if (levelNumber === GAME_STATE.LEVEL3) {
    return 'SEWER'
  } else if (levelNumber === GAME_STATE.LEVEL4) {
    return 'RAT\'S CAVE'
  }
}

export function renderUI({context: cx, canvas: cs}, {playerState, GameState}) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  cx.save();

  // –†–∞–∑–º–µ—Ä—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã UI
  const tileSize = 20; // –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
  const uiHeight = tileSize * 2;
  const canvasWidth = cx.canvas.width;

  // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
  cx.fillStyle = 'black';
  cx.fillRect(0, 0, canvasWidth, uiHeight);

  // –†–∏—Å—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞–º–∫—É –≤ —Å—Ç–∏–ª–µ –î–µ–Ω–¥–∏
  cx.fillStyle = '#333';
  cx.fillRect(5, 5, canvasWidth - 10, uiHeight - 10);

  // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è UI
  cx.lineWidth = 2;
  cx.strokeStyle = '#FFD700'; // –ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–º–∫–∏
  cx.fillStyle = 'rgb(246,255,167)';
  cx.fillRect(4, 4, canvasWidth - 10, uiHeight - 10);

  // –î–µ–ª–∏–º UI –Ω–∞ —Ç—Ä–∏ —Ä–∞–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
  const sectionWidth = canvasWidth / 3 - 60;

  // –ó–∞–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞
  cx.textAlign = 'left';
  cx.textBaseline = 'middle';
  cx.font = 'bold 12px monospace'; // –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç

  // –°–µ–∫—Ü–∏—è 1: –£—Ä–æ–≤–µ–Ω—å
  const levelX = 20;
  const centerY = uiHeight / 2;
  cx.fillStyle = '#FF8C00'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —É—Ä–æ–≤–Ω—è
  cx.fillText(`LEVEL: ${renderLevelName(playerState.currentLevel) || 'SECRET'}`, levelX, centerY);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–∞—Ö
  const cats = playerState.cats || [];
  if (cats.length >= 2) {
    // –°–µ–∫—Ü–∏—è 2: –ë–µ–ª—ã–π –∫–æ—Ç (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤—ã–π –≤ –º–∞—Å—Å–∏–≤–µ)
    const whiteCat = cats[0];
    const whiteCatX = sectionWidth + 10;

    cx.fillStyle =  whiteCat.isActive ? '#165134' : '#a1a1a1';;
    const whiteCatText = `${whiteCat.name}: ${whiteCat.lives || 0}/10`;
    cx.fillText(whiteCatText, whiteCatX, centerY);

    // –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–ª–æ–≥–æ –∫–æ—Ç–∞
    const textWidth = cx.measureText(whiteCatText).width;
    const whiteHealthBarX = whiteCatX + textWidth + 10;
    const healthBarY = centerY - 5;
    const healthBarWidth = sectionWidth - textWidth - 30;
    const healthBarHeight = 10;
    const whiteHealthPercent = (whiteCat.health || 0) / 100;

    // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    renderHealthBar(cx, whiteHealthBarX, healthBarY, healthBarWidth, healthBarHeight, whiteHealthPercent);

    // –ï—Å–ª–∏ –∫–æ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (whiteCat.isActive) {
      const blinkRate = Math.floor(Date.now() / 500) % 2;
      if (blinkRate === 0) {
        cx.fillStyle = '#165134';
        cx.fillText('‚ñ∂', whiteCatX - 15, centerY-1);
      }
    }

    // –°–µ–∫—Ü–∏—è 3: –ß–µ—Ä–Ω—ã–π –∫–æ—Ç (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤—Ç–æ—Ä–æ–π –≤ –º–∞—Å—Å–∏–≤–µ)
    const blackCat = cats[1];
    const blackCatX = sectionWidth * 2 + 40;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ç–∞
    let blackCatColor = blackCat.isActive ? '#165134' : '#afafaf'; // –ì–æ–ª—É–±–æ–≤–∞—Ç—ã–π –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å —á–µ—Ä–Ω—ã–º

    // –†–∏—Å—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ—Ä–Ω–æ–º –∫–æ—Ç–µ
    cx.fillStyle = blackCatColor;
    const blackCatText = `${blackCat.name}: ${blackCat.lives || 0}/10`;
    cx.fillText(blackCatText, blackCatX, centerY);

    // –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–Ω–æ–≥–æ –∫–æ—Ç–∞
    const blackTextWidth = cx.measureText(blackCatText).width;
    const blackHealthBarX = blackCatX + blackTextWidth + 10;
    const blackHealthPercent = (blackCat.health || 0) / 100;

    // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    renderHealthBar(cx, blackHealthBarX, healthBarY, healthBarWidth, healthBarHeight, blackHealthPercent);

    // –ï—Å–ª–∏ –∫–æ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (blackCat.isActive) {
      const blinkRate = Math.floor(Date.now() / 500) % 2;
      if (blinkRate === 0) {
        cx.fillStyle = '#165134';
        cx.fillText('‚ñ∂', blackCatX - 15, centerY-1);
      }
    }

    cx.fillStyle = '#000000';
    if (GameState.musicEnabled) {
      cx.font = '15px Arial';  // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
      cx.fillText('üîâ', cs.width - 60, 15);
      cx.font = '10px Arial';  // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
      cx.fillText('(press M to disable)', cs.width - 100, 28);
    } else {
      cx.font = '15px Arial';  // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
      cx.fillText('üîá', cs.width - 60, 15);
      cx.font = '10px Arial';  // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
      cx.fillText('(press M to enable)', cs.width - 100, 28);
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  cx.restore();
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤ —Å—Ç–∏–ª–µ –∏–≥—Ä—ã –ø—Ä–æ –ß–µ—Ä–Ω–æ–≥–æ –ü–ª–∞—â–∞
 */
function renderHealthBar(cx, x, y, width, height, healthPercent) {
  // –§–æ–Ω –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
  cx.fillStyle = '#000';
  cx.fillRect(x - 1, y - 1, width + 2, height + 2);

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–ª–æ—Å–∫–µ –∑–¥–æ—Ä–æ–≤—å—è
  const segments = 10;
  const segmentWidth = width / segments;
  const filledSegments = Math.ceil(healthPercent * segments);

  // –†–∏—Å—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  for (let i = 0; i < segments; i++) {
    const segmentX = x + i * segmentWidth;

    if (i < filledSegments) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
      let segmentColor;
      if (healthPercent > 0.7) {
        segmentColor = '#22FF22'; // –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
      } else if (healthPercent > 0.3) {
        segmentColor = '#FFFF00'; // –ñ–µ–ª—Ç—ã–π
      } else {
        segmentColor = '#FF3333'; // –ö—Ä–∞—Å–Ω—ã–π
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
      cx.fillStyle = segmentColor;
      cx.fillRect(
        segmentX,
        y,
        segmentWidth - 1, // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        height
      );

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—Ä—Ö—É —Å–µ–≥–º–µ–Ω—Ç–∞ (–∫–∞–∫ –≤ –î–µ–Ω–¥–∏ –∏–≥—Ä–∞—Ö)
      cx.fillStyle = '#FFFFFF';
      cx.fillRect(
        segmentX,
        y,
        segmentWidth - 1,
        2
      );
    } else {
      // –ü—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç
      cx.fillStyle = '#444';
      cx.fillRect(
        segmentX,
        y,
        segmentWidth - 1,
        height
      );
    }
  }

  // –†–∞–º–∫–∞ –¥–ª—è –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
  cx.strokeStyle = '#888';
  cx.lineWidth = 1;
  cx.strokeRect(x - 1, y - 1, width + 2, height + 2);
}
